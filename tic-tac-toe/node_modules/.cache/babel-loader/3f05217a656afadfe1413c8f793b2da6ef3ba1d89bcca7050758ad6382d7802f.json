{"ast":null,"code":"var _jsxFileName = \"/Users/akindeleagun/Documents/GitHub/Tict-Tac-Toe/tic-tac-toe/src/App/App.jsx\",\n  _s = $RefreshSig$();\n// Importing necessary components and constants\nimport GameBoard from \"./components/GameBoard\";\nimport Log from \"./components/Log\";\nimport Player from \"./components/Player\";\nimport { useState } from \"react\";\nimport { WINNING_COMBINATIONS } from \"./winning-combinations\";\nimport { GameOver } from \"../components/GameOver/GameOver\";\nimport { PLAYERS } from \"./PlayersSynbol\";\nimport { INITIAL_GAME_BOARD } from \"./InitialGameBoard\";\n\n// Function to determine the active player based on the game turns\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst deriveActivePlayer = gameTurns => {\n  let currentPlayer = \"X\";\n  if (gameTurns.length > 0 && gameTurns[0].player === \"X\") {\n    currentPlayer = \"O\";\n  }\n  return currentPlayer;\n};\n\n// Function to determine the winner of the game\nconst deriveWinner = (gameBoard, players) => {\n  let winner;\n  for (const combinations of WINNING_COMBINATIONS) {\n    const firstSquareSymbol = gameBoard[combinations[0].row][combinations[0].column];\n    const secondSquareSymbol = gameBoard[combinations[1].row][combinations[1].column];\n    const thirdSquareSymbol = gameBoard[combinations[2].row][combinations[2].column];\n    if (firstSquareSymbol && firstSquareSymbol === secondSquareSymbol && firstSquareSymbol === thirdSquareSymbol) {\n      winner = players[firstSquareSymbol];\n    }\n  }\n  return winner;\n};\n\n// Function to derive the current state of the game board based on the game turns\nconst deriveGameBoard = gameTurns => {\n  let gameBoard = [...INITIAL_GAME_BOARD.map(array => [...array])];\n  for (const turn of gameTurns) {\n    const {\n      square,\n      player\n    } = turn;\n    const {\n      row,\n      col\n    } = square;\n    gameBoard[row][col] = player;\n  }\n  return gameBoard;\n};\n\n// Main App component\nconst App = () => {\n  _s();\n  const [players, setPlayers] = useState(PLAYERS); // State for players\n  const [gameTurns, setGameTurns] = useState([]); // State for game turns\n\n  const activePlayer = deriveActivePlayer(gameTurns); // Active player\n  const gameBoard = deriveGameBoard(gameTurns); // Current game board\n  const winner = deriveWinner(gameBoard, players); // Winner of the game\n  const hasDraw = gameTurns.length === 9 && !winner; // Check if the game is a draw\n\n  // Function to handle the selection of a square on the game board\n  const handleSelectSquare = (rowIndex, colIndex) => {\n    setGameTurns(prevTurns => {\n      let currentPlayer = deriveActivePlayer(prevTurns);\n      const updatedTurns = [{\n        square: {\n          row: rowIndex,\n          col: colIndex\n        },\n        player: currentPlayer\n      }, ...prevTurns];\n      return updatedTurns;\n    });\n  };\n\n  // Function to handle a rematch\n  const handleRematch = () => {\n    setGameTurns([]);\n  };\n\n  // Function to handle the change of a player's name\n  const handlePlayerName = (symbol, newName) => {\n    setPlayers(prevPlayers => {\n      return {\n        ...prevPlayers,\n        [symbol]: newName\n      };\n    });\n  };\n\n  // Render the App component\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n        id: \"players\",\n        className: \"highlight-player\",\n        children: [/*#__PURE__*/_jsxDEV(Player, {\n          initialName: PLAYERS.X,\n          symbol: \"X\",\n          isActive: activePlayer === \"X\",\n          onChangeName: handlePlayerName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Player, {\n          initialName: PLAYERS.O,\n          symbol: \"O\",\n          isActive: activePlayer === \"O\",\n          onChangeName: handlePlayerName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), (winner || hasDraw) && /*#__PURE__*/_jsxDEV(GameOver, {\n        winner: winner,\n        onRestart: handleRematch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n        onSelectSquare: handleSelectSquare,\n        turns: gameTurns,\n        board: gameBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Log, {\n      turns: gameTurns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"op8dGQvGriAtyrYZFNnXthvVXU8=\");\n_c = App;\nexport default App; // Export the App component\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["GameBoard","Log","Player","useState","WINNING_COMBINATIONS","GameOver","PLAYERS","INITIAL_GAME_BOARD","jsxDEV","_jsxDEV","deriveActivePlayer","gameTurns","currentPlayer","length","player","deriveWinner","gameBoard","players","winner","combinations","firstSquareSymbol","row","column","secondSquareSymbol","thirdSquareSymbol","deriveGameBoard","map","array","turn","square","col","App","_s","setPlayers","setGameTurns","activePlayer","hasDraw","handleSelectSquare","rowIndex","colIndex","prevTurns","updatedTurns","handleRematch","handlePlayerName","symbol","newName","prevPlayers","children","id","className","initialName","X","isActive","onChangeName","fileName","_jsxFileName","lineNumber","columnNumber","O","onRestart","onSelectSquare","turns","board","_c","$RefreshReg$"],"sources":["/Users/akindeleagun/Documents/GitHub/Tict-Tac-Toe/tic-tac-toe/src/App/App.jsx"],"sourcesContent":["// Importing necessary components and constants\nimport GameBoard from \"./components/GameBoard\";\nimport Log from \"./components/Log\";\nimport Player from \"./components/Player\";\nimport { useState } from \"react\";\nimport { WINNING_COMBINATIONS } from \"./winning-combinations\";\nimport { GameOver } from \"../components/GameOver/GameOver\";\nimport { PLAYERS } from \"./PlayersSynbol\";\nimport { INITIAL_GAME_BOARD } from \"./InitialGameBoard\"; \n\n// Function to determine the active player based on the game turns\nconst deriveActivePlayer = (gameTurns) => {\n    let currentPlayer = \"X\";\n    if (gameTurns.length > 0 && gameTurns[0].player === \"X\") {\n        currentPlayer = \"O\";\n    }\n    return currentPlayer;\n};\n\n// Function to determine the winner of the game\nconst deriveWinner = (gameBoard, players) =>{\n    let winner;\n    for (const combinations of WINNING_COMBINATIONS){\n        const firstSquareSymbol = gameBoard[combinations[0].row][combinations[0].column];\n        const secondSquareSymbol = gameBoard[combinations[1].row][combinations[1].column];\n        const thirdSquareSymbol  = gameBoard[combinations[2].row][combinations[2].column];\n\n        if(firstSquareSymbol && firstSquareSymbol === secondSquareSymbol && firstSquareSymbol === thirdSquareSymbol){\n            winner = players[firstSquareSymbol]\n        }\n    }\n    return winner;\n}\n\n// Function to derive the current state of the game board based on the game turns\nconst deriveGameBoard =(gameTurns)=>{\n    let gameBoard = [...INITIAL_GAME_BOARD.map(array => [...array])]\n    for (const turn of gameTurns) {\n        const { square, player } = turn;\n        const { row, col } = square;\n\n        gameBoard[row][col] = player;\n    }\n    return gameBoard;\n}\n\n// Main App component\nconst App = () => {\n    const [players, setPlayers] = useState(PLAYERS) // State for players\n    const [gameTurns, setGameTurns] = useState([]); // State for game turns\n\n    const activePlayer = deriveActivePlayer(gameTurns); // Active player\n    const gameBoard = deriveGameBoard(gameTurns); // Current game board\n    const winner = deriveWinner(gameBoard, players); // Winner of the game\n    const hasDraw = gameTurns.length === 9 && !winner; // Check if the game is a draw\n\n    // Function to handle the selection of a square on the game board\n    const handleSelectSquare = (rowIndex, colIndex) => {\n        setGameTurns((prevTurns) => {\n            let currentPlayer = deriveActivePlayer(prevTurns);\n            const updatedTurns = [\n                { square: { row: rowIndex, col: colIndex }, player: currentPlayer },\n                ...prevTurns,\n            ];\n            return updatedTurns;\n        });\n    };\n\n    // Function to handle a rematch\n    const handleRematch = () =>{\n        setGameTurns([]);\n    }\n\n    // Function to handle the change of a player's name\n    const handlePlayerName = (symbol, newName) =>{\n        setPlayers(prevPlayers => {\n            return {\n                ...prevPlayers,\n                [symbol]: newName\n            }\n        })\n    }\n\n    // Render the App component\n    return (\n        <main>\n            <div id=\"game-container\">\n                <ol id=\"players\" className=\"highlight-player\">\n                    <Player\n                        initialName={PLAYERS.X}\n                        symbol=\"X\"\n                        isActive={activePlayer === \"X\"}\n                        onChangeName={handlePlayerName}\n                    />\n                    <Player\n                        initialName={PLAYERS.O}\n                        symbol=\"O\"\n                        isActive={activePlayer === \"O\"}\n                        onChangeName={handlePlayerName}\n                    />\n                </ol>\n                {(winner || hasDraw) && <GameOver winner={winner} onRestart={handleRematch} />}\n                <GameBoard onSelectSquare={handleSelectSquare} turns={gameTurns} board={gameBoard} />\n            </div>\n            <Log turns={gameTurns} />\n        </main>\n    );\n}\n\nexport default App; // Export the App component"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}